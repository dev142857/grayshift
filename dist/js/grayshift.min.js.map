{"version":3,"sources":["../../js/src/dom/selectors.js","../../js/src/alert.js","../../js/src/util/index.js","../../js/index.umd.js","../../js/src/collapse.js","../../js/src/dropdown.js","../../js/src/modal.js","../../js/src/tab.js"],"names":["dataParentString","fadeString","showString","activeString","Alert","alertDismissSelector","alertDismiss","document","querySelectorAll","length","forEach","el","addEventListener","e","alert","closest","matches","classList","contains","remove","complete","removeEventListener","preventDefault","getTarget","target","getAttribute","Collapse","collapseString","collapsingString","collapseToggleSelector","collapseTriggers","content","querySelector","contentParent","collapseParent","collapsed","clearOpen","previousElementSibling","collapseTrigger","id","hide","show","add","style","height","display","scrollHeight","getHeight","setAttribute","trigger","offsetHeight","Dropdown","dropdownToggleSelector","dropdownTriggers","clearMenus","dropdownTrigger","dropdownMenu","nextElementSibling","dropdownOpen","stopPropagation","key","Modal","modalBackdropString","modalTriggers","modal","modalHasAnimation","activeElement","blur","body","overflow","modalBackdrop","createElement","className","appendChild","removeAttribute","hideModal","modalComplete","modalBackdropComplete","Tab","navClass","tabToggleSelector","navs","nav","tabs","tab","tabPane","clearTabs","tabPaneOpen","tabContent","parentElement","tabPanes","Array","from","children","tabPaneActive","hideTabPanes"],"mappings":"0OACO,MAEDA,EAAmB,iBAEnBC,EAAa,OACbC,EAAa,OACbC,EAAe,SCOfC,EAAQ,MAEZ,MAEMC,EAAuB,4BAGvBC,EAAeC,SAASC,iBAAiBH,GAG5CC,EAAaG,OAAS,GAEvBH,EAAaI,SAAQC,IACnBA,EAAGC,iBAAiB,SAASC,IAE3B,MAAMC,EAAQH,EAAGI,QAZJ,UAcPT,EAAeK,EAAGK,QAAQX,GAGhC,GAAGS,GAASR,EAAc,CAKxB,GAH0BQ,EAAMG,UAAUC,SAASjB,EAAYC,GAGzC,CAEpBY,EAAMG,UAAUE,OAAOjB,GAEvB,MAAMkB,EAAW,KAEfN,EAAMG,UAAUE,OAAOlB,GAEvBa,EAAMK,SAENL,EAAMO,oBAAoB,gBAAiBD,IAG7CN,EAAMF,iBAAiB,gBAAiBQ,QAGxCN,EAAMK,SAKVN,EAAES,wBA9CI,GCXRC,EAAYZ,IAEhB,IAAIa,EAASb,EAAGc,aFHO,kBEYvB,OANID,IAEFA,EAASb,EAAGc,aAAa,SAIpBD,SCDM,CACbpB,MAAAA,EACAsB,SCAe,MAEf,MAAMC,EAAiB,WACjBC,EAAmB,aAEnBC,EAAyB,8BAGzBC,EAAmBvB,SAASC,iBAAiBqB,GAGhDC,EAAiBrB,OAAS,GAE3BqB,EAAiBpB,SAAQC,IACvBA,EAAGC,iBAAiB,SAASC,IAE3B,MAAMkB,EAAUxB,SAASyB,cAAcT,EAAUZ,IAGjD,GAAGoB,EAAS,CAEV,MAAME,EAAgBF,EAAQN,aAAazB,GAErCkC,EAAiBH,EAAQhB,QAAQkB,GAEjCE,EAAYJ,EAAQd,UAAUC,SAAShB,GAEvCkC,EAAY,KAEhB,MAAMF,EAAiB3B,SAASyB,cAAcC,GAG9CC,EAAe1B,iBA5BH,aA4BmCE,SAAQC,IAErD,GAAGA,EAAG0B,uBAAwB,CAE5B,MAAMC,EAAkB3B,EAAG0B,uBAAuBtB,QAAQc,IAA2BlB,EAAG0B,uBAAuBL,cAAcH,GAE7HI,EAAgBtB,EAAGc,aAAazB,GAG7BW,IAAOoB,GAAWE,IAAkB,IAAIC,EAAeK,MAExDC,EAAK7B,EAAI2B,QAMXG,EAAOV,IAcXA,EAAQd,UAAUE,OAAOQ,GAEzBI,EAAQd,UAAUyB,IAAId,GAEtBG,EAAQY,MAAMC,OAhBI,MAEhBb,EAAQY,MAAME,QAAU,QAExB,MAAMD,EAASb,EAAQe,aAAe,KAItC,OAFAf,EAAQY,MAAME,QAAU,GAEjBD,GAQcG,GAGvBpC,EAAGqC,aAAa,iBAAiB,GAGjC,MAAM5B,EAAW,KAEfW,EAAQd,UAAUE,OAAOS,GAEzBG,EAAQd,UAAUyB,IAAIf,EAAgBzB,GAEtC6B,EAAQY,MAAMC,OAAS,GAEvBb,EAAQV,oBAAoB,gBAAiBD,IAG/CW,EAAQnB,iBAAiB,gBAAiBQ,IAGtCoB,EAAO,CAACT,EAASkB,EAAUtC,KAE/BoB,EAAQY,MAAMC,OAASb,EAAQe,aAAe,KAG9Cf,EAAQd,UAAUyB,IAAId,GAEtBG,EAAQd,UAAUE,OAAOQ,EAAgBzB,GAEzC6B,EAAQmB,aAERnB,EAAQY,MAAMC,OAAS,GAGvBK,EAAQD,aAAa,iBAAiB,GAGtC,MAAM5B,EAAW,KAEfW,EAAQd,UAAUE,OAAOS,GAEzBG,EAAQd,UAAUyB,IAAIf,GAEtBI,EAAQV,oBAAoB,gBAAiBD,IAG/CW,EAAQnB,iBAAiB,gBAAiBQ,IAIzCc,GAEDE,IAIED,EAKFK,EAAKT,GAHLU,EAAKV,GAQTlB,EAAES,wBArIO,GDCf6B,SEHe,MAEf,MAAMC,EAAyB,8BAGzBC,EAAmB9C,SAASC,iBAAiB4C,GAGnD,GAAGC,EAAiB5C,OAAS,EAAG,CAE9B,MAAM6C,EAAa,KAEjBD,EAAiB3C,SAAQC,IAEvB,MAAM4C,EAAkB5C,EAAGK,QAAQoC,GAE7BI,EAAe7C,EAAG8C,mBAGrBF,GAAmBC,IAEpBA,EAAavC,UAAUE,OAAOjB,GAE9BS,EAAGM,UAAUE,OAAOjB,GAEpBS,EAAGqC,aAAa,iBAAiB,QAMvCK,EAAiB3C,SAAQC,IACvBA,EAAGC,iBAAiB,SAASC,IAE3B,MAAM0C,EAAkB5C,EAAGK,QAAQoC,GAE7BI,EAAe7C,EAAG8C,mBAGxB,GAAGF,GAAmBC,EAAc,CAElC,MAAME,EAAeF,EAAavC,UAAUC,SAAShB,GAGrDoD,IAGII,IAEFF,EAAavC,UAAUyB,IAAIxC,GAE3BS,EAAGM,UAAUyB,IAAIxC,GAEjBS,EAAGqC,aAAa,iBAAiB,IAInCnC,EAAE8C,kBAIJ9C,EAAES,uBAKNf,SAASK,iBAAiB,SAAS,IAAM0C,MAEzC/C,SAASK,iBAAiB,SAASC,IAEpB,WAAVA,EAAE+C,KACHN,SAvES,GFIfO,MGDY,MAEZ,MACMC,EAAsB,iBAMtBC,EAAgBxD,SAASC,iBAJH,4BAO5B,GAAGuD,EAActD,OAAS,EAAG,CAE3BsD,EAAcrD,SAAQC,IACpBA,EAAGC,iBAAiB,SAASC,IAE3B,MAAMmD,EAAQzD,SAASyB,cAAcT,EAAUZ,IAG/C,GAAGqD,EAAO,CAER,MAAMC,EAAoBD,EAAM/C,UAAUC,SAASjB,GAGnDM,SAAS2D,cAAcC,OAEvB5D,SAAS6D,KAAKzB,MAAM0B,SAAW,SAE/B,MAAMC,EAAgB/D,SAASgE,cAAc,OAE7CD,EAAcE,UAAYV,EAE1BvD,SAAS6D,KAAKK,YAAYH,GAE1BN,EAAMrB,MAAME,QAAU,QAEtBmB,EAAMU,gBAAgB,eAEtBV,EAAMhB,aAAa,cAAc,GAEjCgB,EAAMhB,aAAa,OAAQ,UAGxBiB,IAEDK,EAAcrD,UAAUyB,IAAIzC,GAE5BqE,EAAcpB,cAIhBoB,EAAcrD,UAAUyB,IAAIxC,GAE5B,MAAMkB,EAAW,KAEf4C,EAAM/C,UAAUyB,IAAIxC,GAEpBoE,EAAcjD,oBAAoB,gBAAiBD,IAGrDkD,EAAc1D,iBAAiB,gBAAiBQ,GAIlDP,EAAES,uBAIN,MAAMqD,EAAY,KAChBZ,EAAcrD,SAAQC,IAEpB,MAAMqD,EAAQzD,SAASyB,cAAcT,EAAUZ,IAEzC2D,EAAgB/D,SAASyB,cAtEV,mBAyErB,GAAGgC,EAAO,CAER,MAAMC,EAAoBD,EAAM/C,UAAUC,SAASjB,GAcnD,GAXA+D,EAAM/C,UAAUE,OAAOjB,GAEvB8D,EAAMhB,aAAa,eAAe,GAElCgB,EAAMU,gBAAgB,cAEtBV,EAAMU,gBAAgB,QAEtBnE,SAAS6D,KAAKzB,MAAM0B,SAAW,GAG5BJ,EAAmB,CACpB,MAAMW,EAAgB,KAEpBN,EAAcrD,UAAUE,OAAOjB,GAE/B8D,EAAM3C,oBAAoB,gBAAiBuD,IAG7CZ,EAAMpD,iBAAiB,gBAAiBgE,GAExC,MAAMC,EAAwB,KAE5Bb,EAAMrB,MAAME,QAAU,OAEtByB,EAAcnD,SAEdmD,EAAcjD,oBAAoB,gBAAiBwD,IAGrDP,EAAc1D,iBAAiB,gBAAiBiE,QAGhDb,EAAMrB,MAAME,QAAU,OAEtByB,EAAcnD,cAMtBZ,SAASK,iBAAiB,SAASC,IACjCkD,EAAcrD,SAAQC,IAEpB,MAAMqD,EAAQzD,SAASyB,cAAcT,EAAUZ,IAG5CE,EAAEW,SAAWwC,GACdW,OAKD9D,EAAEW,OAAOT,QAjIa,8BAkIvB4D,OAIJpE,SAASK,iBAAiB,SAASC,IAEpB,WAAVA,EAAE+C,KACHe,SA/IM,GHEZG,IIDU,MAEV,MAAMC,EAAW,OACXC,EAAoB,yBAGpBC,EAAO1E,SAASC,iBAAiBuE,GAGpCE,EAAKxE,OAAS,GAEfwE,EAAKvE,SAAQwE,IAEX,MAAMC,EAAOD,EAAI1E,iBAAiBwE,GAGlCG,EAAKzE,SAAQ0E,IACXA,EAAIxE,iBAAiB,SAASC,IAE5B,MAAMwE,EAAU9E,SAASyB,cAAcT,EAAU6D,IAGjD,GAAGF,EAAIlE,QAAQ+D,GAAW,CAgCxB,GA9BkB,MAEhBI,EAAKzE,SAAQC,IAERA,IAAOyE,IAERzE,EAAGM,UAAUE,OAAOhB,GAGW,QAA5BQ,EAAGc,aAAa,SAEjBd,EAAGqC,aAAa,iBAAiB,QAOzCsC,GAGAF,EAAInE,UAAUyB,IAAIvC,GAGc,QAA7BiF,EAAI3D,aAAa,SAElB2D,EAAIpC,aAAa,iBAAiB,GAIjCqC,EAAS,CAEV,MAAME,EAAcF,EAAQpE,UAAUC,SAAShB,GAEzCsF,EAAaH,EAAQI,cAE3B,GAAGL,EAAIpE,QAAQgE,IAAsBQ,EAAY,CAE/C,MAAME,EAAWC,MAAMC,KAAKJ,EAAWK,UAEjCC,EAAgBN,EAAWxD,cAAc,oBAkC/C,GA/BqB,MAEnB0D,EAAShF,SAAQC,IAEf,GAAGA,IAAO0E,EAKR,GAHA1E,EAAGM,UAAUE,OAAOjB,GAGjBS,EAAGM,UAAUC,SAASjB,IAAe6F,EAAe,CAErD,MAAM1E,EAAW,KAEfT,EAAGM,UAAUE,OAAOhB,GAEpB2F,EAAczE,oBAAoB,gBAAiBD,IAGrD0E,EAAclF,iBAAiB,gBAAiBQ,QAGhDT,EAAGM,UAAUE,OAAOhB,OAO5B4F,IAGIR,EAEF,GAAGF,EAAQpE,UAAUC,SAASjB,IAAe6F,EAAe,CAE1D,MAAM1E,EAAW,KAEfiE,EAAQpE,UAAUyB,IAAIvC,GAEtBkF,EAAQnC,aAERmC,EAAQpE,UAAUyB,IAAIxC,GAEtB4F,EAAczE,oBAAoB,gBAAiBD,IAGrD0E,EAAclF,iBAAiB,gBAAiBQ,QAGhDiE,EAAQpE,UAAUyB,IAAIvC,EAAcD,KAQ9CW,EAAES,2BA5HA","sourcesContent":["// Global selectors\nexport const dataToggleString = 'data-gs-toggle',\n      dataTargetString = 'data-gs-target',\n      dataParentString = 'data-gs-parent',\n      dataDismissString = 'data-gs-dismiss',\n      fadeString = 'fade',\n      showString = 'show',\n      activeString = 'active',\n      activeClass = `.${activeString}`;\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): alert.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport {\n  dataDismissString,\n  fadeString,\n  showString\n} from './dom/selectors';\n\n// Alert\nconst Alert = (() => {\n  // Selectors\n  const alertString = 'alert',\n        alertClass = `.${alertString}`,\n        alertDismissSelector = `[${dataDismissString}=\"${alertString}\"]`;\n\n  // Variables\n  const alertDismiss = document.querySelectorAll(alertDismissSelector);\n\n  // Check if there are any triggers\n  if(alertDismiss.length > 0) {\n    // Add a click event on each of them\n    alertDismiss.forEach(el => {\n      el.addEventListener('click', e => {\n        // Get the \"alert\" class\n        const alert = el.closest(alertClass),\n              // Check for the alert dismiss selector\n              alertDismiss = el.matches(alertDismissSelector);\n\n        // Check if the alert should be cleared\n        if(alert && alertDismiss) {\n          // Check for both the \"fade\" and the \"show\" class on the alert\n          const alertHasAnimation = alert.classList.contains(fadeString, showString);\n\n          // Check if the alert dismiss should be animated\n          if(alertHasAnimation) {\n            // Remove the \"show\" class from the alert\n            alert.classList.remove(showString);\n\n            const complete = () => {\n              // Remove the \"fade\" class from the alert\n              alert.classList.remove(fadeString);\n              // Remove the alert\n              alert.remove();\n              // Remove event listener after it runs\n              alert.removeEventListener('transitionend', complete);\n            };\n\n            alert.addEventListener('transitionend', complete);\n          } else {\n            // Remove the alert\n            alert.remove();\n          }\n        }\n\n        // Stop the default behaviour\n        e.preventDefault();\n      });\n    });\n  }\n})();\n\nexport default Alert;\n","import { dataTargetString } from '../dom/selectors';\n\n// Get the target of the controller element\nconst getTarget = el => {\n  // Check for the \"data-gs-target\" attribute\n  let target = el.getAttribute(dataTargetString);\n\n  // If there isn't one\n  if(!target) {\n    // Check for the \"href\" attribute\n    target = el.getAttribute('href');\n  }\n\n  // If there's a match, return the target\n  return target;\n};\n\nexport default getTarget;\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): index.umd.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport Alert from './src/alert';\nimport Collapse from './src/collapse';\nimport Dropdown from './src/dropdown';\nimport Modal from './src/modal';\nimport Tab from './src/tab';\n\nexport default {\n  Alert,\n  Collapse,\n  Dropdown,\n  Modal,\n  Tab\n}\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): collapse.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport {\n  dataToggleString,\n  dataParentString,\n  showString\n} from './dom/selectors';\nimport getTarget from './util/index';\n\n// Collapse\nconst Collapse = (() => {\n  // Selectors\n  const collapseString = 'collapse',\n        collapsingString = 'collapsing',\n        collapseClass = `.${collapseString}`,\n        collapseToggleSelector = `[${dataToggleString}=\"${collapseString}\"]`;\n\n  // Variables\n  const collapseTriggers = document.querySelectorAll(collapseToggleSelector);\n\n  // Check if there are any triggers\n  if(collapseTriggers.length > 0) {\n    // Add a click event on each of them\n    collapseTriggers.forEach(el => {\n      el.addEventListener('click', e => {\n        // Get the targeted content\n        const content = document.querySelector(getTarget(el));\n\n        // Check if there is content to collapse\n        if(content) {\n          // Get the content parent\n          const contentParent = content.getAttribute(dataParentString),\n                // Get the parent of the collapse\n                collapseParent = content.closest(contentParent),\n                // Check for the \"show\" class on the content\n                collapsed = content.classList.contains(showString);\n\n          const clearOpen = () => {\n            // Get the collapse parent\n            const collapseParent = document.querySelector(contentParent);\n\n            // Loop through all collapsed and clear them\n            collapseParent.querySelectorAll(collapseClass).forEach(el => {\n              // Check if there are any triggers\n              if(el.previousElementSibling) {\n                // Get the collapse trigger\n                const collapseTrigger = el.previousElementSibling.closest(collapseToggleSelector) || el.previousElementSibling.querySelector(collapseToggleSelector),\n                // Get the content parent\n                contentParent = el.getAttribute(dataParentString);\n\n                // Check if the content should be hidden\n                if(el !== content && contentParent === `#${collapseParent.id}`) {\n                  // Hide content\n                  hide(el, collapseTrigger);\n                }\n              }\n            });\n          };\n\n          const show = content => {\n            // Get the natural height of the content\n            const getHeight = () => {\n              // Make it visible\n              content.style.display = 'block';\n              // Get it's height\n              const height = content.scrollHeight + 'px';\n              // Hide it again\n              content.style.display = '';\n\n              return height;\n            };\n\n            // Remove the \"collapse\" class\n            content.classList.remove(collapseString);\n            // Add the \"collapsing\" class\n            content.classList.add(collapsingString);\n            // Update the inline height\n            content.style.height = getHeight();\n\n            // Set the \"aria-expanded\" attribute to \"true\"\n            el.setAttribute('aria-expanded', true);\n\n            // When the transition is complete, show it\n            const complete = () => {\n              // Remove the \"collapsing\" class\n              content.classList.remove(collapsingString);\n              // Add both the \"collapse\" and the \"show\" class\n              content.classList.add(collapseString, showString);\n              // Remove the inline height\n              content.style.height = '';\n              // Remove event listener after it runs\n              content.removeEventListener('transitionend', complete);\n            };\n\n            content.addEventListener('transitionend', complete);\n          };\n\n          const hide = (content, trigger = el) => {\n            // Give the element a height to change from\n            content.style.height = content.scrollHeight + 'px';\n\n            // Add the \"collapsing\" class\n            content.classList.add(collapsingString);\n            // Remove both the \"collapse\" and the \"show\" class\n            content.classList.remove(collapseString, showString);\n            // Force reflow to enable transition\n            content.offsetHeight;\n            // Remove the inline height\n            content.style.height = '';\n\n            // Set the \"aria-expanded\" attribute to false\n            trigger.setAttribute('aria-expanded', false);\n\n            // When the transition is complete, hide it\n            const complete = () => {\n              // Remove the \"collapsing\" class\n              content.classList.remove(collapsingString);\n              // Add the \"collapse\" class\n              content.classList.add(collapseString);\n              // Remove event listener after it runs\n              content.removeEventListener('transitionend', complete);\n            };\n\n            content.addEventListener('transitionend', complete);\n          };\n\n          // Check if there are any parents\n          if(collapseParent) {\n            // Clear all collapsed\n            clearOpen();\n          }\n\n          // Check if the content should collapse\n          if(!collapsed) {\n            // If the content is hidden, show it\n            show(content);\n          } else {\n            // Otherwise, hide it\n            hide(content);\n          }\n        }\n\n        // Stop the default behaviour\n        e.preventDefault();\n      });\n    });\n  }\n})();\n\nexport default Collapse;\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): dropdown.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport {\n  dataToggleString,\n  showString\n} from './dom/selectors';\n\n// Dropdown\nconst Dropdown = (() => {\n  // Selectors\n  const dropdownToggleSelector = `[${dataToggleString}=\"dropdown\"]`;\n\n  // Variables\n  const dropdownTriggers = document.querySelectorAll(dropdownToggleSelector);\n\n  // Check if there are any dropdown triggers\n  if(dropdownTriggers.length > 0) {\n    // Clear all dropdowns\n    const clearMenus = () => {\n      // Loop through them\n      dropdownTriggers.forEach(el => {\n        // Check for the dropdown toggle selector\n        const dropdownTrigger = el.matches(dropdownToggleSelector),\n              // Get the dropdown menu\n              dropdownMenu = el.nextElementSibling;\n\n        // Check if there are any dropdowns\n        if(dropdownTrigger && dropdownMenu) {\n          // Remove the \"show\" class on the dropdown menu\n          dropdownMenu.classList.remove(showString);\n          // Remove the \"show\" class on the trigger\n          el.classList.remove(showString);\n          // Set the \"aria-expanded\" attribute to \"false\"\n          el.setAttribute('aria-expanded', false);\n        }\n      });\n    };\n\n    // Add a click event on each dropdown trigger\n    dropdownTriggers.forEach(el => {\n      el.addEventListener('click', e => {\n        // Check for the dropdown toggle selector\n        const dropdownTrigger = el.matches(dropdownToggleSelector),\n              // Get the dropdown menu\n              dropdownMenu = el.nextElementSibling;\n\n        // Check if there are any dropdowns\n        if(dropdownTrigger && dropdownMenu) {\n          // Check for the \"show\" class on the menu\n          const dropdownOpen = dropdownMenu.classList.contains(showString);\n\n          // Clear all open dropdowns\n          clearMenus();\n\n          // Check if the clicked dropdown should be opened\n          if(!dropdownOpen) {\n            // Open the clicked dropdown\n            dropdownMenu.classList.add(showString);\n            // Add the \"show\" class on toggle\n            el.classList.add(showString);\n            // Set the \"aria-expanded\" attribute to \"true\"\n            el.setAttribute('aria-expanded', true);\n          }\n\n          // Stop the bubbling of the current event\n          e.stopPropagation();\n        }\n\n        // Stop the default behaviour\n        e.preventDefault();\n      });\n    });\n\n    // Clear dropdowns when clicked outside of dropdown\n    document.addEventListener('click', () => clearMenus());\n\n    document.addEventListener('keyup', e => {\n      // Clear dropdowns on escape keyup\n      if(e.key === 'Escape') {\n        clearMenus();\n      }\n    });\n  }\n})();\n\nexport default Dropdown;\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): modal.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport {\n  dataToggleString,\n  dataDismissString,\n  fadeString,\n  showString\n} from './dom/selectors';\nimport getTarget from './util/index';\n\n// Modal\nconst Modal = (() => {\n  // Selectors\n  const modalString = 'modal',\n        modalBackdropString = 'modal-backdrop',\n        modalBackdropClass = `.${modalBackdropString}`,\n        modalToggleSelector = `[${dataToggleString}=\"${modalString}\"]`,\n        modalDismissSelector = `[${dataDismissString}=\"${modalString}\"]`;\n\n  // Variables\n  const modalTriggers = document.querySelectorAll(modalToggleSelector);\n\n  // Check if there are any triggers\n  if(modalTriggers.length > 0) {\n    // Add a click event on each of them\n    modalTriggers.forEach(el => {\n      el.addEventListener('click', e => {\n        // Get the targeted modal\n        const modal = document.querySelector(getTarget(el));\n\n        // Check if the modal should be opened\n        if(modal) {\n          // Check for the \"fade\" class on the modal\n          const modalHasAnimation = modal.classList.contains(fadeString);\n\n          // Remove the keyboard focus from the trigger\n          document.activeElement.blur();\n          // Add \"overflow: hidden\" on the body\n          document.body.style.overflow = 'hidden';\n          // Create a new div element\n          const modalBackdrop = document.createElement('div');\n          // Add the \"modal-backdrop\" class to it\n          modalBackdrop.className = modalBackdropString;\n          // Append it to the body\n          document.body.appendChild(modalBackdrop);\n          // Show modal\n          modal.style.display = 'block';\n          // Remove the \"aria-hidden\" attribute\n          modal.removeAttribute('aria-hidden');\n          // Set the \"aria-modal\" attribute to \"true\"\n          modal.setAttribute('aria-modal', true);\n          // Set the \"role\" attribute to \"dialog\"\n          modal.setAttribute('role', 'dialog');\n\n          // Check if the modal should be animated\n          if(modalHasAnimation) {\n            // Add the \"fade\" class on the modal backdrop\n            modalBackdrop.classList.add(fadeString);\n            // Force reflow to enable transition\n            modalBackdrop.offsetHeight;\n          }\n\n          // Add the \"show\" class on the modal backdrop\n          modalBackdrop.classList.add(showString);\n\n          const complete = () => {\n            // Add the \"show\" class on the modal\n            modal.classList.add(showString);\n            // Remove event listener after it runs\n            modalBackdrop.removeEventListener('transitionend', complete);\n          };\n\n          modalBackdrop.addEventListener('transitionend', complete);\n        }\n\n        // Stop the default behaviour\n        e.preventDefault();\n      });\n    });\n\n    const hideModal = () => {\n      modalTriggers.forEach(el => {\n        // Get the targeted modal\n        const modal = document.querySelector(getTarget(el)),\n              // Get the modal backdrop\n              modalBackdrop = document.querySelector(modalBackdropClass);\n\n        // Check if the modal should be hidden\n        if(modal) {\n          // Check for the \"fade\" class on the modal\n          const modalHasAnimation = modal.classList.contains(fadeString);\n\n          // Remove the \"show\" class on the modal\n          modal.classList.remove(showString);\n          // Set the \"aria-hidden\" attribute to \"true\"\n          modal.setAttribute('aria-hidden', true);\n          // Remove the \"aria-modal\" attribute\n          modal.removeAttribute('aria-modal');\n          // Remove the \"role\" attribute\n          modal.removeAttribute('role');\n          // Remove \"overflow: hidden\" from the body\n          document.body.style.overflow = '';\n\n          // Check if the modal should be animated\n          if(modalHasAnimation) {\n            const modalComplete = () => {\n              // Remove the \"show\" class from the modal backdrop\n              modalBackdrop.classList.remove(showString);\n              // Remove event listener after it runs\n              modal.removeEventListener('transitionend', modalComplete);\n            };\n\n            modal.addEventListener('transitionend', modalComplete);\n\n            const modalBackdropComplete = () => {\n              // Hide modal\n              modal.style.display = 'none';\n              // Remove the modal backdrop\n              modalBackdrop.remove();\n              // Remove event listener after it runs\n              modalBackdrop.removeEventListener('transitionend', modalBackdropComplete);\n            };\n\n            modalBackdrop.addEventListener('transitionend', modalBackdropComplete);\n          } else {\n            // Hide modal\n            modal.style.display = 'none';\n            // Remove the modal backdrop\n            modalBackdrop.remove();\n          }\n        }\n      });\n    };\n\n    document.addEventListener('click', e => {\n      modalTriggers.forEach(el => {\n        // Get the targeted modal\n        const modal = document.querySelector(getTarget(el));\n\n        // Hide modal when clicked outside of the modal\n        if(e.target === modal) {\n          hideModal();\n        }\n      });\n\n      // Hide modal when clicked on the close button\n      if(e.target.closest(modalDismissSelector)) {\n        hideModal();\n      }\n    });\n\n    document.addEventListener('keyup', e => {\n      // Hide modal on escape keyup\n      if(e.key === 'Escape') {\n        hideModal();\n      }\n    });\n  }\n})();\n\nexport default Modal;\n","/**\n* --------------------------------------------------------------------------\n* Grayshift (v1.0.2): dropdown.js\n* Licensed under MIT (https://opensource.org/licenses/mit-license.php)\n* --------------------------------------------------------------------------\n*/\n\nimport {\n  dataToggleString,\n  fadeString,\n  showString,\n  activeString,\n  activeClass\n} from './dom/selectors';\nimport getTarget from './util/index';\n\n// Tab\nconst Tab = (() => {\n  // Selectors\n  const navClass = '.nav',\n        tabToggleSelector = `[${dataToggleString}=\"tab\"]`;\n\n  // Variables\n  const navs = document.querySelectorAll(navClass);\n\n  // Check if there are any navs\n  if(navs.length > 0) {\n    // Loop through them\n    navs.forEach(nav => {\n      // Get the nav tabs\n      const tabs = nav.querySelectorAll(tabToggleSelector);\n\n      // Add a click event on each of them\n      tabs.forEach(tab => {\n        tab.addEventListener('click', e => {\n          // Get the targeted tab pane\n          const tabPane = document.querySelector(getTarget(tab));\n\n          // Check for the \"nav\" class on the nav\n          if(nav.matches(navClass)) {\n            // Clear all tabs\n            const clearTabs = () => {\n              // Loop through them\n              tabs.forEach(el => {\n                // Check if the tab should be cleared\n                if(el !== tab) {\n                  // Remove the \"active\" class\n                  el.classList.remove(activeString);\n\n                  // Check for the \"role\" attribute\n                  if(el.getAttribute('role') === 'tab') {\n                    // Set the \"aria-selected\" attribute to \"false\"\n                    el.setAttribute('aria-selected', false);\n                  }\n                }\n              });\n            };\n\n            // Clear all active tabs\n            clearTabs();\n\n            // Add the \"active\" class\n            tab.classList.add(activeString);\n\n            // Check for the \"role\" attribute\n            if(tab.getAttribute('role') === 'tab') {\n              // Set the \"aria-selected\" attribute to \"true\"\n              tab.setAttribute('aria-selected', true);\n            }\n\n            // Check if there are any tab panes\n            if(tabPane) {\n              // Check for the \"show\" class on the tab pane\n              const tabPaneOpen = tabPane.classList.contains(showString),\n                    // Get the tab content\n                    tabContent = tabPane.parentElement;\n\n              if(tab.matches(tabToggleSelector) && tabContent) {\n                // Get the tab panes\n                const tabPanes = Array.from(tabContent.children),\n                      // Get the active tab pane\n                      tabPaneActive = tabContent.querySelector(`:scope > ${activeClass}`);\n\n                // Hide all tab panes\n                const hideTabPanes = () => {\n                  // Loop through them\n                  tabPanes.forEach(el => {\n                    // Check if the tab pane should be hidden\n                    if(el !== tabPane) {\n                      // Remove the \"show\" class\n                      el.classList.remove(showString);\n\n                      // Check if the tab pane should be animated\n                      if(el.classList.contains(fadeString) && tabPaneActive) {\n                        // When the transition is complete, hide it\n                        const complete = () => {\n                          // Remove the \"active\" class\n                          el.classList.remove(activeString);\n                          // Remove event listener after it runs\n                          tabPaneActive.removeEventListener('transitionend', complete);\n                        };\n\n                        tabPaneActive.addEventListener('transitionend', complete);\n                      } else {\n                        // Remove the \"active\" class\n                        el.classList.remove(activeString);\n                      }\n                    }\n                  });\n                };\n\n                // Hide all open tab panes\n                hideTabPanes();\n\n                // Check if the tab pane should be opened\n                if(!tabPaneOpen) {\n                  // Check if the tab pane should be animated\n                  if(tabPane.classList.contains(fadeString) && tabPaneActive) {\n                    // When the transition is complete, show it\n                    const complete = () => {\n                      // Add the \"active\" class\n                      tabPane.classList.add(activeString);\n                      // Force reflow to enable transition\n                      tabPane.offsetHeight;\n                      // Add the \"show\" class\n                      tabPane.classList.add(showString);\n                      // Remove event listener after it runs\n                      tabPaneActive.removeEventListener('transitionend', complete);\n                    };\n\n                    tabPaneActive.addEventListener('transitionend', complete);\n                  } else {\n                    // Add both the \"active\" and the \"show\" class\n                    tabPane.classList.add(activeString, showString);\n                  }\n                }\n              }\n            }\n          }\n\n          // Stop the default behaviour\n          e.preventDefault();\n        });\n      });\n    });\n  }\n})();\n\nexport default Tab;\n"]}